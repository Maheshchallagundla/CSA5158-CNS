#include <stdio.h>
#include <string.h>

void decryptPlayfair(char cipher[], char key[]) {
    int i, j, k, l;
    char matrix[5][5], plaintext[100], temp[25];
    char *ptr; 
    
    strcpy(temp, key);
    ptr = temp;
    while (*ptr != '\0') {
        if (*ptr == ' ') {
            strcpy(ptr, ptr + 1);
        } else {
            ptr++;
        }
    }
    ptr = temp;
    while (*ptr != '\0') {
        if (strchr(ptr + 1, *ptr) != NULL) {
            strcpy(ptr, ptr + 1);
        } else {
            ptr++;
        }
    }

    k = 0;
    for (i = 0; i < 5; i++) {
        for (j = 0; j < 5; j++) {
            if (k < strlen(temp)) {
                matrix[i][j] = temp[k++];
            } else {
                for (l = 0; l < 26; l++) {
                    if (l + 'A' != 'J' && strchr(temp, l + 'A') == NULL) {
                        matrix[i][j] = l + 'A';
                        break;
                    }
                }
            }
        }
    }

    k = 0;
    for (i = 0; i < strlen(cipher); i += 2) {
        int r1, c1, r2, c2;
        for (j = 0; j < 5; j++) {
            for (l = 0; l < 5; l++) {
                if (matrix[j][l] == cipher[i]) {
                    r1 = j;
                    c1 = l;
                } else if (matrix[j][l] == cipher[i + 1]) {
                    r2 = j;
                    c2 = l;
                }
            }
        }
        if (r1 == r2) {
            plaintext[k++] = matrix[r1][(c1 + 4) % 5];
            plaintext[k++] = matrix[r2][(c2 + 4) % 5];
        } else if (c1 == c2) {
            plaintext[k++] = matrix[(r1 + 4) % 5][c1];
            plaintext[k++] = matrix[(r2 + 4) % 5][c2];
        } else {
            plaintext[k++] = matrix[r1][c2];
            plaintext[k++] = matrix[r2][c1];
        }
    }
    plaintext[k] = '\0';

    printf("Decrypted message: %s\n", plaintext);
}

int main() {
    char cipher[] = "KXJEYUREBEZWEHEWRYTUHEYFSKREHEGOYFIWITTUOLKSYCAJPO???????NTXBYBNTGONEYCUZWRGDSONSXBOUYWRHEBAAHYUSEDQ";
    char key[] = "PLAYFAIR EXAMPLE";

    decryptPlayfair(cipher, key);

    return 0;
}
