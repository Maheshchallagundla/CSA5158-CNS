#include<stdio.h>
#include<stdlib.h>
#include<math.h>

int isPrime(int n) {
    if (n <= 1) return 0;
    if (n <= 3) return 1;
    if (n % 2 == 0 || n % 3 == 0) return 0;
    for (int i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0)
            return 0;
    }
    return 1;
}

int gcd(int a, int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

void generateKeys(int *e, int *d, int *n) {
    int p, q, phi, publicKey;
    
    do {
        p = rand() % 50 + 50; 
    } while (!isPrime(p));

    do {
        q = rand() % 50 + 50;
    } while (!isPrime(q));

    *n = p * q; 
    phi = (p - 1) * (q - 1); 

    do {
        publicKey = rand() % (phi - 2) + 2;
    } while (gcd(publicKey, phi) != 1);

    *e = publicKey;

    int k = 2; 
    *d = (1 + (k * phi)) / publicKey;
}

long long int power(long long int x, unsigned int y, int p) {
    long long int res = 1;
    x = x % p;
    while (y > 0) {
        if (y & 1)
            res = (res * x) % p;
        y = y >> 1;
        x = (x * x) % p;
    }
    return res;
}

long long int encrypt(int plaintext, int e, int n) {
    return power(plaintext, e, n);
}

long long int decrypt(long long int ciphertext, int d, int n) {
    return power(ciphertext, d, n);
}

int main() {
    int e, d, n; 
    int plaintext, encrypted_text;
    
    generateKeys(&e, &d, &n);

    printf("Enter the plaintext (integer): ");
    scanf("%d", &plaintext);

    encrypted_text = encrypt(plaintext, e, n);
    printf("Encrypted text: %lld\n", encrypted_text);

    long long int decrypted_text = decrypt(encrypted_text, d, n);
    printf("Decrypted text: %lld\n", decrypted_text);

    return 0;
}
